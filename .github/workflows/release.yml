name: release
concurrency: 'release'

on:
  pull_request:
    branches:
      - stable
    types:
      - closed
    paths-ignore:
      - 'docs/**'      

  workflow_dispatch:
      
jobs:  
  release:
    name: 🎁 Publish new release
    # Only run on manual dispatch or on merged 'release-' pull requests
    if: github.ref == 'refs/heads/stable' || 
        github.event.pull_request.merged == true && contains(github.head_ref, 'release/v') == true
    runs-on: ubuntu-latest
    steps:
      
      - name: 🛒 Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BUNIT_BOT_TOKEN }}
      
      - name: 🛠️ Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: Unreleased
          path: ./CHANGELOG.md
      
      - name: ☑ Check that release contains changes
        if: steps.changelog_reader.outputs.changes == ''
        run: |
          echo "::error file=CHANGELOG.md::The unreleased section in the changelog is empty. Nothing to release."
          exit 1
          
      - name: ⚙️ Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.BUNIT_BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BUNIT_BOT_GPG_KEY_PASSPHRASE }}
      
      - name: ⚙️ Setup CI GIT
        run: |
          git config user.name "${{ steps.import_gpg.outputs.name }}"
          git config user.email ${{ steps.import_gpg.outputs.email }}
          git config --global user.signingkey ${{ steps.import_gpg.outputs.keyid }}
          git config --global commit.gpgsign true          
      
      - name: ⚙️ Setup GIT versioning
        uses: dotnet/nbgv@v0.4.0
        with:
          setAllVars: true    

      - name: ⚙️ Setup dotnet 5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: 🛠️ Building library in release mode
        run: dotnet pack src/ -c release -p:ContinuousIntegrationBuild=true
        
      - name: 🛠️ Upload library to NuGet.org repository
        run: echo "TODO"
        
      - name: 🛠️ Update changelog
        uses: thomaseizinger/keep-a-changelog-new-release@1.2.1
        with:
          version: ${{ env.NBGV_SimpleVersion }}

      - name: 🛠️ Commit CHANGELOG.md to stable branch
        run: |
          git add CHANGELOG.md
          git commit -S -m "Updated CHANGELOG.md for ${{ env.NBGV_SimpleVersion }} release"
          git push origin stable

      - name: ⏩ Merge stable with main
        run: | 
          git checkout main
          git merge -S stable
          git push origin main
                
      - name: 🛠️ Create GitHub release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NBGV_SimpleVersion }}
          name: Release ${{ env.NBGV_SimpleVersion }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          draft: false
          prerelease: ${{ env.NBGV_PublicRelease == 'False' }}
